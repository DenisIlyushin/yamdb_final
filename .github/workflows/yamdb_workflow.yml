name: SPRINT 13 workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    -
      uses: actions/checkout@v2

    -
      name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - 
      name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt 
    - 
      id: run_flake8_test
      name: Test with flake8
      run: python -m flake8
    - 
      name: Pytest
      run: pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
    -
      name: Check out the repo
      uses: actions/checkout@v2

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    -
      name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    -
      name: Push to Docker Hub
      uses: docker/build-push-action@v2
      with:
        context: api_yamdb/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/yamdb_api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:

      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_SERVER }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/yamdb_api:latest
            sudo docker-compose down
                        
            # перезапускаем контейнеры
            sudo docker-compose up -d 
            
            # миграции
            sudo docker-compose exec -T web python manage.py migrate
            
            # создание пользовательского админа Django
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='${{ secrets.DJANGO_ADMIN_USERNAME }}').exists() or User.objects.create_superuser('${{ secrets.DJANGO_ADMIN_USERNAME }}', '${{ secrets.DJANGO_ADMIN_EMAIL }}', '${{ secrets.DJANGO_ADMIN_PASSWORD }}')" | sudo docker-compose exec -T web python manage.py shell
            
            # Создание админа Django по умполчанию
            # echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@fake.fake', 'admin')" | sudo docker-compose exec -T web python manage.py shell
            
            # Настройка статики
            sudo docker-compose exec -T web python manage.py collectstatic --no-input
            
            # Наполнение базы стандартными данными
            # docker-compose exec -Т web python manage.py import_csv
            
            # Обслуживание Docker. Удаление старых образов
            sudo docker system prune -af
            sudo docker volume prune -f

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      -
        name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!